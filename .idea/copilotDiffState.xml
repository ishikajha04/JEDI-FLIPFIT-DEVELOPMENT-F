<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/JEDI-FLIPFLIT-JAVA-POS/src/main/java/com/flipfit/dao/impl/FlipfitCardDAOImpl.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/JEDI-FLIPFLIT-JAVA-POS/src/main/java/com/flipfit/dao/impl/FlipfitCardDAOImpl.java" />
              <option name="originalContent" value="package com.flipfit.dao.impl;&#10;&#10;import com.flipfit.bean.FlipfitCard;&#10;import com.flipfit.dao.FlipfitCardDAO;&#10;import com.flipfit.exception.DatabaseException;&#10;import com.flipfit.utils.DBUtils;&#10;import com.flipfit.utils.DatabaseConnection;&#10;&#10;import java.sql.*;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;/**&#10; * MySQL implementation of FlipfitCardDAO&#10; */&#10;public class FlipfitCardDAOImpl implements FlipfitCardDAO {&#10;&#10;    @Override&#10;    public boolean addCard(FlipfitCard card) {&#10;        String sql = &quot;INSERT INTO flipfit_cards (customer_id, card_number, card_holder_name, expiry_date, cvv, card_type) &quot; +&#10;                     &quot;VALUES (?, ?, ?, ?, ?, ?)&quot;;&#10;        Connection connection = null;&#10;        PreparedStatement statement = null;&#10;        ResultSet generatedKeys = null;&#10;&#10;        try {&#10;            connection = DatabaseConnection.getConnection();&#10;            statement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);&#10;            statement.setInt(1, card.getCustomerId());&#10;            statement.setString(2, card.getCardNumber());&#10;            statement.setString(3, card.getCardHolderName());&#10;            statement.setString(4, card.getExpiryDate());&#10;            statement.setString(5, card.getCvv());&#10;            statement.setString(6, &quot;DEBIT&quot;); // Default card type&#10;&#10;            int rowsAffected = statement.executeUpdate();&#10;&#10;            if (rowsAffected &gt; 0) {&#10;                generatedKeys = statement.getGeneratedKeys();&#10;                if (generatedKeys.next()) {&#10;                    card.setCardId(generatedKeys.getInt(1));&#10;                }&#10;                return true;&#10;            }&#10;        } catch (SQLException e) {&#10;            throw new DatabaseException(&quot;Error adding card: &quot; + e.getMessage(), e);&#10;        } finally {&#10;            if (generatedKeys != null) {&#10;                DBUtils.closeResultSet(generatedKeys);&#10;            }&#10;            DBUtils.closeResources(statement, connection);&#10;        }&#10;&#10;        return false;&#10;    }&#10;&#10;    @Override&#10;    public boolean removeCard(int cardId, int customerId) {&#10;        String sql = &quot;UPDATE flipfit_cards SET is_active = false WHERE card_id = ? AND customer_id = ?&quot;;&#10;        Connection connection = null;&#10;        PreparedStatement statement = null;&#10;&#10;        try {&#10;            connection = DatabaseConnection.getConnection();&#10;            statement = connection.prepareStatement(sql);&#10;            statement.setInt(1, cardId);&#10;            statement.setInt(2, customerId);&#10;&#10;            int rowsAffected = statement.executeUpdate();&#10;            return rowsAffected &gt; 0;&#10;        } catch (SQLException e) {&#10;            throw new DatabaseException(&quot;Error removing card: &quot; + e.getMessage(), e);&#10;        } finally {&#10;            DBUtils.closeResources(statement, connection);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean updateCard(FlipfitCard card) {&#10;        String sql = &quot;UPDATE flipfit_cards SET card_holder_name = ?, expiry_date = ? WHERE card_id = ? AND customer_id = ?&quot;;&#10;        Connection connection = null;&#10;        PreparedStatement statement = null;&#10;&#10;        try {&#10;            connection = DatabaseConnection.getConnection();&#10;            statement = connection.prepareStatement(sql);&#10;            statement.setString(1, card.getCardHolderName());&#10;            statement.setString(2, card.getExpiryDate());&#10;            statement.setInt(3, card.getCardId());&#10;            statement.setInt(4, card.getCustomerId());&#10;&#10;            int rowsAffected = statement.executeUpdate();&#10;            return rowsAffected &gt; 0;&#10;        } catch (SQLException e) {&#10;            throw new DatabaseException(&quot;Error updating card: &quot; + e.getMessage(), e);&#10;        } finally {&#10;            DBUtils.closeResources(statement, connection);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public List&lt;FlipfitCard&gt; getCustomerCards(int customerId) {&#10;        String sql = &quot;SELECT * FROM flipfit_cards WHERE customer_id = ? AND is_active = true&quot;;&#10;        List&lt;FlipfitCard&gt; cards = new ArrayList&lt;&gt;();&#10;        Connection connection = null;&#10;        PreparedStatement statement = null;&#10;        ResultSet resultSet = null;&#10;&#10;        try {&#10;            connection = DatabaseConnection.getConnection();&#10;            statement = connection.prepareStatement(sql);&#10;            statement.setInt(1, customerId);&#10;            resultSet = statement.executeQuery();&#10;&#10;            while (resultSet.next()) {&#10;                cards.add(mapResultSetToCard(resultSet));&#10;            }&#10;        } catch (SQLException e) {&#10;            throw new DatabaseException(&quot;Error getting customer cards: &quot; + e.getMessage(), e);&#10;        } finally {&#10;            DBUtils.closeResources(resultSet, statement, connection);&#10;        }&#10;&#10;        return cards;&#10;    }&#10;&#10;    /**&#10;     * Maps a ResultSet to a FlipfitCard object&#10;     * @param resultSet The ResultSet containing card data&#10;     * @return A FlipfitCard object&#10;     * @throws SQLException if a database access error occurs&#10;     */&#10;    private FlipfitCard mapResultSetToCard(ResultSet resultSet) throws SQLException {&#10;        FlipfitCard card = new FlipfitCard();&#10;        card.setCardId(resultSet.getInt(&quot;card_id&quot;));&#10;        card.setCustomerId(resultSet.getInt(&quot;customer_id&quot;));&#10;        card.setCardNumber(resultSet.getString(&quot;card_number&quot;));&#10;        card.setCardHolderName(resultSet.getString(&quot;card_holder_name&quot;));&#10;        card.setExpiryDate(resultSet.getString(&quot;expiry_date&quot;));&#10;        card.setCvv(resultSet.getString(&quot;cvv&quot;));&#10;        return card;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.flipfit.dao.impl;&#10;&#10;import com.flipfit.bean.FlipfitCard;&#10;import com.flipfit.dao.FlipfitCardDAO;&#10;import com.flipfit.exception.DatabaseException;&#10;import com.flipfit.utils.DBUtils;&#10;import com.flipfit.utils.DatabaseConnection;&#10;&#10;import java.sql.*;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;/**&#10; * MySQL implementation of FlipfitCardDAO&#10; */&#10;public class FlipfitCardDAOImpl implements FlipfitCardDAO {&#10;&#10;    @Override&#10;    public boolean addCard(FlipfitCard card) {&#10;        String sql = &quot;INSERT INTO flipfit_cards (customer_id, card_number, card_holder_name, expiry_date, cvv, card_type) &quot; +&#10;                     &quot;VALUES (?, ?, ?, ?, ?, ?)&quot;;&#10;        Connection connection = null;&#10;        PreparedStatement statement = null;&#10;        ResultSet generatedKeys = null;&#10;&#10;        try {&#10;            connection = DatabaseConnection.getConnection();&#10;            statement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);&#10;            statement.setInt(1, card.getCustomerId());&#10;            statement.setString(2, card.getCardNumber());&#10;            statement.setString(3, card.getCardHolderName());&#10;            &#10;            // Convert MM/YY format to a valid MySQL date format (YYYY-MM-DD)&#10;            String expiryDate = card.getExpiryDate();&#10;            if (expiryDate != null &amp;&amp; expiryDate.matches(&quot;\\d{2}/\\d{2}&quot;)) {&#10;                String[] parts = expiryDate.split(&quot;/&quot;);&#10;                String month = parts[0];&#10;                String year = &quot;20&quot; + parts[1]; // Assuming 20xx for the century&#10;                // Set to last day of the month for maximum validity&#10;                String formattedDate = String.format(&quot;%s-%s-%s&quot;, year, month, &quot;01&quot;);&#10;                statement.setString(4, formattedDate);&#10;            } else {&#10;                statement.setString(4, expiryDate);&#10;            }&#10;            &#10;            statement.setString(5, card.getCvv());&#10;            statement.setString(6, &quot;DEBIT&quot;); // Default card type&#10;&#10;            int rowsAffected = statement.executeUpdate();&#10;&#10;            if (rowsAffected &gt; 0) {&#10;                generatedKeys = statement.getGeneratedKeys();&#10;                if (generatedKeys.next()) {&#10;                    card.setCardId(generatedKeys.getInt(1));&#10;                }&#10;                return true;&#10;            }&#10;        } catch (SQLException e) {&#10;            throw new DatabaseException(&quot;Error adding card: &quot; + e.getMessage(), e);&#10;        } finally {&#10;            if (generatedKeys != null) {&#10;                DBUtils.closeResultSet(generatedKeys);&#10;            }&#10;            DBUtils.closeResources(statement, connection);&#10;        }&#10;&#10;        return false;&#10;    }&#10;&#10;    @Override&#10;    public boolean removeCard(int cardId, int customerId) {&#10;        String sql = &quot;UPDATE flipfit_cards SET is_active = false WHERE card_id = ? AND customer_id = ?&quot;;&#10;        Connection connection = null;&#10;        PreparedStatement statement = null;&#10;&#10;        try {&#10;            connection = DatabaseConnection.getConnection();&#10;            statement = connection.prepareStatement(sql);&#10;            statement.setInt(1, cardId);&#10;            statement.setInt(2, customerId);&#10;&#10;            int rowsAffected = statement.executeUpdate();&#10;            return rowsAffected &gt; 0;&#10;        } catch (SQLException e) {&#10;            throw new DatabaseException(&quot;Error removing card: &quot; + e.getMessage(), e);&#10;        } finally {&#10;            DBUtils.closeResources(statement, connection);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean updateCard(FlipfitCard card) {&#10;        String sql = &quot;UPDATE flipfit_cards SET card_holder_name = ?, expiry_date = ? WHERE card_id = ? AND customer_id = ?&quot;;&#10;        Connection connection = null;&#10;        PreparedStatement statement = null;&#10;&#10;        try {&#10;            connection = DatabaseConnection.getConnection();&#10;            statement = connection.prepareStatement(sql);&#10;            statement.setString(1, card.getCardHolderName());&#10;            statement.setString(2, card.getExpiryDate());&#10;            statement.setInt(3, card.getCardId());&#10;            statement.setInt(4, card.getCustomerId());&#10;&#10;            int rowsAffected = statement.executeUpdate();&#10;            return rowsAffected &gt; 0;&#10;        } catch (SQLException e) {&#10;            throw new DatabaseException(&quot;Error updating card: &quot; + e.getMessage(), e);&#10;        } finally {&#10;            DBUtils.closeResources(statement, connection);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public List&lt;FlipfitCard&gt; getCustomerCards(int customerId) {&#10;        String sql = &quot;SELECT * FROM flipfit_cards WHERE customer_id = ? AND is_active = true&quot;;&#10;        List&lt;FlipfitCard&gt; cards = new ArrayList&lt;&gt;();&#10;        Connection connection = null;&#10;        PreparedStatement statement = null;&#10;        ResultSet resultSet = null;&#10;&#10;        try {&#10;            connection = DatabaseConnection.getConnection();&#10;            statement = connection.prepareStatement(sql);&#10;            statement.setInt(1, customerId);&#10;            resultSet = statement.executeQuery();&#10;&#10;            while (resultSet.next()) {&#10;                cards.add(mapResultSetToCard(resultSet));&#10;            }&#10;        } catch (SQLException e) {&#10;            throw new DatabaseException(&quot;Error getting customer cards: &quot; + e.getMessage(), e);&#10;        } finally {&#10;            DBUtils.closeResources(resultSet, statement, connection);&#10;        }&#10;&#10;        return cards;&#10;    }&#10;&#10;    /**&#10;     * Maps a ResultSet to a FlipfitCard object&#10;     * @param resultSet The ResultSet containing card data&#10;     * @return A FlipfitCard object&#10;     * @throws SQLException if a database access error occurs&#10;     */&#10;    private FlipfitCard mapResultSetToCard(ResultSet resultSet) throws SQLException {&#10;        FlipfitCard card = new FlipfitCard();&#10;        card.setCardId(resultSet.getInt(&quot;card_id&quot;));&#10;        card.setCustomerId(resultSet.getInt(&quot;customer_id&quot;));&#10;        card.setCardNumber(resultSet.getString(&quot;card_number&quot;));&#10;        card.setCardHolderName(resultSet.getString(&quot;card_holder_name&quot;));&#10;        card.setExpiryDate(resultSet.getString(&quot;expiry_date&quot;));&#10;        card.setCvv(resultSet.getString(&quot;cvv&quot;));&#10;        return card;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/JEDI-FLIPFLIT-JAVA-POS/src/main/java/com/flipfit/business/impl/FlipfitGymOwnerServiceImpl.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/JEDI-FLIPFLIT-JAVA-POS/src/main/java/com/flipfit/business/impl/FlipfitGymOwnerServiceImpl.java" />
              <option name="originalContent" value="&#10;&#10;" />
              <option name="updatedContent" value="package com.flipfit.business.impl;&#10;&#10;import com.flipfit.bean.*;&#10;import com.flipfit.dao.*;&#10;import com.flipfit.dao.impl.*;&#10;import com.flipfit.exception.*;&#10;import com.flipfit.business.FlipfitGymOwnerService;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;/**&#10; * Implementation of FlipfitGymOwnerService that uses MySQL DAO implementations&#10; */&#10;public class FlipfitGymOwnerServiceImpl implements FlipfitGymOwnerService {&#10;    private final FlipfitGymOwnerDAO gymOwnerDAO;&#10;    private final FlipfitGymCenterDAO gymCenterDAO;&#10;    private final FlipfitSlotDAO slotDAO;&#10;    private final FlipfitBookingDAO bookingDAO;&#10;&#10;    public FlipfitGymOwnerServiceImpl() {&#10;        this.gymOwnerDAO = new FlipfitGymOwnerDAOImpl();&#10;        this.gymCenterDAO = new FlipfitGymCenterDAOImpl();&#10;        this.slotDAO = new FlipfitSlotDAOImpl();&#10;        this.bookingDAO = new FlipfitBookingDAOImpl();&#10;    }&#10;&#10;    @Override&#10;    public boolean registerGymOwner(FlipfitGymOwner owner) {&#10;        try {&#10;            if (owner == null || owner.getEmail() == null || owner.getPassword() == null) {&#10;                throw new RegistrationNotDoneException(&quot;Invalid gym owner data provided&quot;);&#10;            }&#10;&#10;            // Check if email already exists&#10;            if (gymOwnerDAO.getGymOwnerByEmail(owner.getEmail()) != null) {&#10;                throw new RegistrationNotDoneException(&quot;A gym owner with email &quot; + owner.getEmail() + &quot; already exists&quot;);&#10;            }&#10;&#10;            boolean result = gymOwnerDAO.addGymOwner(owner);&#10;            if (result) {&#10;                System.out.println(&quot;Gym owner registered successfully with ID: &quot; + owner.getOwnerId());&#10;                System.out.println(&quot;Your registration is pending approval by an administrator&quot;);&#10;            } else {&#10;                throw new RegistrationNotDoneException(&quot;Failed to register gym owner in the database&quot;);&#10;            }&#10;            return result;&#10;        } catch (RegistrationNotDoneException e) {&#10;            String errorMessage = ExceptionHandler.handleException(e);&#10;            System.err.println(errorMessage);&#10;            return false;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Unexpected error during gym owner registration: &quot; + e.getMessage());&#10;            return false;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public FlipfitGymOwner authenticateGymOwner(String email, String password) {&#10;        try {&#10;            FlipfitGymOwner owner = gymOwnerDAO.getGymOwnerByEmail(email);&#10;            if (owner == null) {&#10;                throw new UserNotFoundException(&quot;Gym owner with email &quot; + email + &quot; not found&quot;);&#10;            }&#10;&#10;            if (!owner.getPassword().equals(password)) {&#10;                System.out.println(&quot;Invalid password&quot;);&#10;                return null;&#10;            }&#10;&#10;            return owner;&#10;        } catch (UserNotFoundException e) {&#10;            String errorMessage = ExceptionHandler.handleException(e);&#10;            System.err.println(errorMessage);&#10;            return null;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Unexpected error during authentication: &quot; + e.getMessage());&#10;            return null;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean addGymCenter(FlipfitGymCenter center) {&#10;        try {&#10;            if (center == null) {&#10;                throw new RegistrationNotDoneException(&quot;Invalid gym center data provided&quot;);&#10;            }&#10;&#10;            // Verify owner exists and is approved&#10;            FlipfitGymOwner owner = gymOwnerDAO.getGymOwnerById(center.getOwnerId());&#10;            if (owner == null) {&#10;                throw new UserNotFoundException(&quot;Gym owner with ID &quot; + center.getOwnerId() + &quot; not found&quot;);&#10;            }&#10;&#10;            if (!owner.isApproved()) {&#10;                throw new RegistrationNotDoneException(&quot;Your account must be approved before adding gym centers&quot;);&#10;            }&#10;&#10;            boolean result = gymCenterDAO.addGymCenter(center);&#10;            if (result) {&#10;                System.out.println(&quot;Gym center added successfully with ID: &quot; + center.getCenterId());&#10;                System.out.println(&quot;Your gym center is pending approval by an administrator&quot;);&#10;            } else {&#10;                throw new RegistrationNotDoneException(&quot;Failed to add gym center to the database&quot;);&#10;            }&#10;            return result;&#10;        } catch (RegistrationNotDoneException | UserNotFoundException e) {&#10;            String errorMessage = ExceptionHandler.handleException(e);&#10;            System.err.println(errorMessage);&#10;            return false;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Unexpected error adding gym center: &quot; + e.getMessage());&#10;            return false;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean updateGymCenter(FlipfitGymCenter center) {&#10;        try {&#10;            if (center == null) {&#10;                throw new RegistrationNotDoneException(&quot;Invalid gym center data provided&quot;);&#10;            }&#10;&#10;            // Verify center exists&#10;            FlipfitGymCenter existingCenter = gymCenterDAO.getGymCenterById(center.getCenterId());&#10;            if (existingCenter == null) {&#10;                throw new SlotNotFoundException(&quot;Gym center with ID &quot; + center.getCenterId() + &quot; not found&quot;);&#10;            }&#10;&#10;            // Check if the owner owns this center&#10;            if (existingCenter.getOwnerId() != center.getOwnerId()) {&#10;                throw new UserNotFoundException(&quot;You do not own this gym center&quot;);&#10;            }&#10;&#10;            boolean result = gymCenterDAO.updateGymCenter(center);&#10;            if (result) {&#10;                System.out.println(&quot;Gym center updated successfully&quot;);&#10;            } else {&#10;                throw new DatabaseException(&quot;Failed to update gym center in the database&quot;);&#10;            }&#10;            return result;&#10;        } catch (SlotNotFoundException | UserNotFoundException | RegistrationNotDoneException e) {&#10;            String errorMessage = ExceptionHandler.handleException(e);&#10;            System.err.println(errorMessage);&#10;            return false;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Unexpected error updating gym center: &quot; + e.getMessage());&#10;            return false;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean addSlotToCenter(FlipfitSlot slot) {&#10;        try {&#10;            if (slot == null) {&#10;                throw new SlotNotFoundException(&quot;Invalid slot data provided&quot;);&#10;            }&#10;&#10;            // Verify gym center exists and is approved&#10;            FlipfitGymCenter center = gymCenterDAO.getGymCenterById(slot.getCenterId());&#10;            if (center == null) {&#10;                throw new SlotNotFoundException(&quot;Gym center with ID &quot; + slot.getCenterId() + &quot; not found&quot;);&#10;            }&#10;&#10;            if (!center.isApproved()) {&#10;                throw new RegistrationNotDoneException(&quot;Gym center must be approved before adding slots&quot;);&#10;            }&#10;&#10;            boolean result = slotDAO.addSlot(slot);&#10;            if (result) {&#10;                System.out.println(&quot;Slot added successfully with ID: &quot; + slot.getSlotId());&#10;            } else {&#10;                throw new SlotNotFoundException(&quot;Failed to add slot to the database&quot;);&#10;            }&#10;            return result;&#10;        } catch (SlotNotFoundException | UserNotFoundException | RegistrationNotDoneException e) {&#10;            String errorMessage = ExceptionHandler.handleException(e);&#10;            System.err.println(errorMessage);&#10;            return false;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Unexpected error adding slot: &quot; + e.getMessage());&#10;            return false;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean updateSlot(FlipfitSlot slot) {&#10;        try {&#10;            if (slot == null) {&#10;                throw new SlotNotFoundException(&quot;Invalid slot data provided&quot;);&#10;            }&#10;&#10;            // Verify slot exists&#10;            FlipfitSlot existingSlot = slotDAO.getSlotById(slot.getSlotId());&#10;            if (existingSlot == null) {&#10;                throw new SlotNotFoundException(&quot;Slot with ID &quot; + slot.getSlotId() + &quot; not found&quot;);&#10;            }&#10;&#10;            // Verify gym center exists&#10;            FlipfitGymCenter center = gymCenterDAO.getGymCenterById(existingSlot.getCenterId());&#10;            if (center == null) {&#10;                throw new SlotNotFoundException(&quot;Gym center with ID &quot; + existingSlot.getCenterId() + &quot; not found&quot;);&#10;            }&#10;&#10;            boolean result = slotDAO.updateSlot(slot);&#10;            if (result) {&#10;                System.out.println(&quot;Slot updated successfully&quot;);&#10;            } else {&#10;                throw new SlotNotFoundException(&quot;Failed to update slot in the database&quot;);&#10;            }&#10;            return result;&#10;        } catch (SlotNotFoundException | UserNotFoundException e) {&#10;            String errorMessage = ExceptionHandler.handleException(e);&#10;            System.err.println(errorMessage);&#10;            return false;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Unexpected error updating slot: &quot; + e.getMessage());&#10;            return false;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean removeSlot(int slotId, int ownerId) {&#10;        try {&#10;            // Verify slot exists&#10;            FlipfitSlot slot = slotDAO.getSlotById(slotId);&#10;            if (slot == null) {&#10;                throw new SlotNotFoundException(&quot;Slot with ID &quot; + slotId + &quot; not found&quot;);&#10;            }&#10;&#10;            // Verify gym center exists&#10;            FlipfitGymCenter center = gymCenterDAO.getGymCenterById(slot.getCenterId());&#10;            if (center == null) {&#10;                throw new SlotNotFoundException(&quot;Gym center with ID &quot; + slot.getCenterId() + &quot; not found&quot;);&#10;            }&#10;&#10;            // Check if the owner owns this center&#10;            if (center.getOwnerId() != ownerId) {&#10;                throw new UserNotFoundException(&quot;You do not own this gym center&quot;);&#10;            }&#10;&#10;            // Check if there are active bookings for this slot&#10;            List&lt;FlipfitBooking&gt; bookings = bookingDAO.getBookingsBySlotId(slotId);&#10;            if (!bookings.isEmpty()) {&#10;                throw new BookingNotConfirmedException(&quot;Cannot remove slot with active bookings&quot;);&#10;            }&#10;&#10;            boolean result = slotDAO.deleteSlot(slotId);&#10;            if (result) {&#10;                System.out.println(&quot;Slot removed successfully&quot;);&#10;            } else {&#10;                throw new SlotNotFoundException(&quot;Failed to remove slot from the database&quot;);&#10;            }&#10;            return result;&#10;        } catch (SlotNotFoundException | UserNotFoundException | BookingNotConfirmedException e) {&#10;            String errorMessage = ExceptionHandler.handleException(e);&#10;            System.err.println(errorMessage);&#10;            return false;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Unexpected error removing slot: &quot; + e.getMessage());&#10;            return false;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean removeGymCenter(int centerId, int ownerId) {&#10;        try {&#10;            // Verify center exists&#10;            FlipfitGymCenter center = gymCenterDAO.getGymCenterById(centerId);&#10;            if (center == null) {&#10;                throw new SlotNotFoundException(&quot;Gym center with ID &quot; + centerId + &quot; not found&quot;);&#10;            }&#10;&#10;            // Check if the owner owns this center&#10;            if (center.getOwnerId() != ownerId) {&#10;                throw new UserNotFoundException(&quot;You do not own this gym center&quot;);&#10;            }&#10;&#10;            // Check if there are active slots for this center&#10;            List&lt;FlipfitSlot&gt; slots = slotDAO.getSlotsByCenterId(centerId);&#10;            for (FlipfitSlot slot : slots) {&#10;                // Check for bookings on this slot&#10;                List&lt;FlipfitBooking&gt; bookings = bookingDAO.getBookingsBySlotId(slot.getSlotId());&#10;                if (!bookings.isEmpty()) {&#10;                    throw new BookingNotConfirmedException(&quot;Cannot remove gym center with active bookings&quot;);&#10;                }&#10;&#10;                // Remove the slot&#10;                slotDAO.deleteSlot(slot.getSlotId());&#10;            }&#10;&#10;            boolean result = gymCenterDAO.deleteGymCenter(centerId);&#10;            if (result) {&#10;                System.out.println(&quot;Gym center and associated slots removed successfully&quot;);&#10;            } else {&#10;                throw new SlotNotFoundException(&quot;Failed to remove gym center from the database&quot;);&#10;            }&#10;            return result;&#10;        } catch (SlotNotFoundException | UserNotFoundException | BookingNotConfirmedException e) {&#10;            String errorMessage = ExceptionHandler.handleException(e);&#10;            System.err.println(errorMessage);&#10;            return false;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Unexpected error removing gym center: &quot; + e.getMessage());&#10;            return false;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public List&lt;FlipfitGymCenter&gt; viewOwnedGymCenters(int ownerId) {&#10;        try {&#10;            List&lt;FlipfitGymCenter&gt; centers = gymCenterDAO.getGymCentersByOwnerId(ownerId);&#10;            if (centers.isEmpty()) {&#10;                System.out.println(&quot;No gym centers found for this owner&quot;);&#10;            }&#10;            return centers;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Unexpected error viewing gym centers: &quot; + e.getMessage());&#10;            return new ArrayList&lt;&gt;();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public List&lt;FlipfitSlot&gt; viewSlotsForCenter(int centerId, int ownerId) {&#10;        try {&#10;            // Verify gym center exists&#10;            FlipfitGymCenter center = gymCenterDAO.getGymCenterById(centerId);&#10;            if (center == null) {&#10;                throw new SlotNotFoundException(&quot;Gym center with ID &quot; + centerId + &quot; not found&quot;);&#10;            }&#10;&#10;            // Check if the owner owns this center&#10;            if (center.getOwnerId() != ownerId) {&#10;                throw new UserNotFoundException(&quot;You do not own this gym center&quot;);&#10;            }&#10;&#10;            List&lt;FlipfitSlot&gt; slots = slotDAO.getSlotsByCenterId(centerId);&#10;            if (slots.isEmpty()) {&#10;                System.out.println(&quot;No slots found for this gym center&quot;);&#10;            }&#10;            return slots;&#10;        } catch (SlotNotFoundException | UserNotFoundException e) {&#10;            String errorMessage = ExceptionHandler.handleException(e);&#10;            System.err.println(errorMessage);&#10;            return new ArrayList&lt;&gt;();&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Unexpected error viewing slots: &quot; + e.getMessage());&#10;            return new ArrayList&lt;&gt;();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public List&lt;FlipfitBooking&gt; viewBookingsForCenter(int centerId, int ownerId) {&#10;        try {&#10;            // Verify gym center exists&#10;            FlipfitGymCenter center = gymCenterDAO.getGymCenterById(centerId);&#10;            if (center == null) {&#10;                throw new SlotNotFoundException(&quot;Gym center with ID &quot; + centerId + &quot; not found&quot;);&#10;            }&#10;&#10;            // Check if the owner owns this center&#10;            if (center.getOwnerId() != ownerId) {&#10;                throw new UserNotFoundException(&quot;You do not own this gym center&quot;);&#10;            }&#10;&#10;            // Get all slots for this center&#10;            List&lt;FlipfitSlot&gt; slots = slotDAO.getSlotsByCenterId(centerId);&#10;&#10;            // Collect bookings for all slots&#10;            List&lt;FlipfitBooking&gt; allBookings = new ArrayList&lt;&gt;();&#10;            for (FlipfitSlot slot : slots) {&#10;                List&lt;FlipfitBooking&gt; slotBookings = bookingDAO.getBookingsBySlotId(slot.getSlotId());&#10;                allBookings.addAll(slotBookings);&#10;            }&#10;&#10;            if (allBookings.isEmpty()) {&#10;                System.out.println(&quot;No bookings found for this gym center&quot;);&#10;            }&#10;            return allBookings;&#10;        } catch (SlotNotFoundException | UserNotFoundException e) {&#10;            String errorMessage = ExceptionHandler.handleException(e);&#10;            System.err.println(errorMessage);&#10;            return new ArrayList&lt;&gt;();&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Unexpected error viewing bookings: &quot; + e.getMessage());&#10;            return new ArrayList&lt;&gt;();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public FlipfitGymOwner getOwnerProfile(int ownerId) {&#10;        try {&#10;            FlipfitGymOwner owner = gymOwnerDAO.getGymOwnerById(ownerId);&#10;            if (owner == null) {&#10;                throw new UserNotFoundException(String.valueOf(ownerId), &quot;Gym Owner&quot;);&#10;            }&#10;            return owner;&#10;        } catch (UserNotFoundException e) {&#10;            String errorMessage = ExceptionHandler.handleException(e);&#10;            System.err.println(errorMessage);&#10;            return null;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Unexpected error retrieving gym owner profile: &quot; + e.getMessage());&#10;            return null;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean updateOwnerProfile(FlipfitGymOwner owner) {&#10;        try {&#10;            if (owner == null) {&#10;                throw new UserNotFoundException(&quot;Invalid gym owner data provided&quot;);&#10;            }&#10;&#10;            // Verify gym owner exists&#10;            FlipfitGymOwner existingOwner = gymOwnerDAO.getGymOwnerById(owner.getOwnerId());&#10;            if (existingOwner == null) {&#10;                throw new UserNotFoundException(&quot;Gym owner with ID &quot; + owner.getOwnerId() + &quot; not found&quot;);&#10;            }&#10;&#10;            boolean result = gymOwnerDAO.updateGymOwner(owner);&#10;            if (result) {&#10;                System.out.println(&quot;Gym owner profile updated successfully&quot;);&#10;            } else {&#10;                throw new DatabaseException(&quot;Failed to update gym owner profile in the database&quot;);&#10;            }&#10;            return result;&#10;        } catch (UserNotFoundException e) {&#10;            String errorMessage = ExceptionHandler.handleException(e);&#10;            System.err.println(errorMessage);&#10;            return false;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Unexpected error updating gym owner profile: &quot; + e.getMessage());&#10;            return false;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean isOwnerApproved(int ownerId) {&#10;        try {&#10;            FlipfitGymOwner owner = gymOwnerDAO.getGymOwnerById(ownerId);&#10;            if (owner == null) {&#10;                throw new UserNotFoundException(String.valueOf(ownerId), &quot;Gym Owner&quot;);&#10;            }&#10;            return owner.isApproved();&#10;        } catch (UserNotFoundException e) {&#10;            String errorMessage = ExceptionHandler.handleException(e);&#10;            System.err.println(errorMessage);&#10;            return false;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Unexpected error checking owner approval status: &quot; + e.getMessage());&#10;            return false;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>
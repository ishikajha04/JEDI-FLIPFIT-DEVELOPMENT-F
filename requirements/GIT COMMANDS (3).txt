Git is a distributed version control system, widely used in software dev to
1.track changes to file, 
2.particularly source code
3.Enabling collaborations,
4.Managing different versions of projects
5.Equation of git is GIT=GITSCM+GITHUB
GITSCM - git local client, installed locally in machine
GITHUB - cloud repo, in which they will push local machine code towards cloud and manage collaboratively.
6. GIt have various commands to manage complete lif cycle ex:
1. Git –version
2. git init
3. Git status
4. Git push
5. Git pull
6. Git remote
7. Git commit
8. Git log
9. Git merge
Etc
Reference: https://www.atlassian.com/git/glossary#commands
7. Git have 3 imp staging areas-> local , git stage and global , git continue all the source code, managed locally and any changes made it has to be add inside staging area, and then it would be easy to pull and push the code from staging area to public github/git cloud.
8. For managing the projects towards the git cloud, we must have github account with respective credentials.


DEMO: 


Commands of git:


1. Git –version - show version of git
2. cd projectpath
3. pwd - current working directory
4. touch Demo.java - create file
5. ls -la - list hidden files
6. cat Demo.java - show file contents
7. Git init - creates .git file 
8. Git add . - add files to staging area
9. git remote add origin - to make connection to global repo


…or create a new repository on the command line
echo "# JEDI-FLIPFIT-DEVELOPMENT" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com//JEDI-FLIPFIT-DEVELOPMENT.git 
git push -u origin main
…or push an existing repository from the command line
git remote add origin https://github.com//JEDI-FLIPFIT-DEVELOPMENT.git
git branch -M main
git push -u origin main
—------------------------------------


JAVA 17


1. Java supports object oriented programming style as well as functional programming
2. Java supports 4 principles - encapsulation, abstraction, modularity, hierarchy
3. Java is a compiler and interpreter language which contains 2 imp files .java-> src file and .class-> byte code
4. There are various types of classes we can create for implementing project
4.1 Bean classes-> This contains properties and setter, getter
4.2 Business classes-> This contains business logic for implementation of the code
4.3 Client class-> This contains main method, entry point of application
4.4 Helper classes -> Help in manipulation and transformation of data
4.5 DAO(Data Access Object)-> help in db logic to do interaction with db like oracle,teradata, mysql etc


5. There are various concepts in java, as mentioned below
5.1 classes object constructor
5.2 I/O 
5.3 exception handling
5.4 JDBC
5.5 Collection and generics
5.6 Interface
5.7 Java 17 new features like date and time api, lamda exp, stream api, for each loop etx
5.8 Java tools for managing the project


DEMO Of customer management application which contains a blow packages structure
com.flipkart.client
com.flipkart.bussiness
Com.flipkart.bean


Task1: create a common repo with common group JEDI-FLIPFIT-DEVELOPMENT-GROUPNAME, i.e push all the diagrams with defined folder structure as mentioned on the board.
UML-ARTIFACTS -> USE-DIAGRAM, ACTIVITY_DIAGRAM, CLASS_DIAGRAM




Task2: Create a project in intellij/STS by group as mentioned below, as defined.\
Com.flipfit.bean
Com.flipfit.business
Com.flipfit.client
Com.flipfit.helper
Com.flipfit.dao
Com.flipfit.validator
Com.flipfit.constant
Com.flipfit.utils
Com.flipfit.exception
After creating this skeleton, focus must be on bean, business and client class identified by the group reference to the flipfit uml class diagram.


Task3: Need to final push the complete structure in git same repo, with name JEDI-FLIPFIT-JAVA-POS